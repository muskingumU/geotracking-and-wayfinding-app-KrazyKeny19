{"ast":null,"code":"var rng;\nvar crypto = global.crypto || global.msCrypto;\n\nif (crypto && crypto.getRandomValues) {\n  var rnds8 = new Uint8Array(16);\n\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  var rnds = new Array(16);\n\n  rng = function rng() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;","map":{"version":3,"sources":["C:/Users/Pig_p/Desktop/School/ReactNativeProjects/MapProject/node_modules/react-native-geojson/node_modules/uuid/lib/rng-browser.js"],"names":["rng","crypto","global","msCrypto","getRandomValues","rnds8","Uint8Array","whatwgRNG","rnds","Array","i","r","Math","random","module","exports"],"mappings":"AAIA,IAAIA,GAAJ;AAEA,IAAIC,MAAM,GAAGC,MAAM,CAACD,MAAP,IAAiBC,MAAM,CAACC,QAArC;;AACA,IAAIF,MAAM,IAAIA,MAAM,CAACG,eAArB,EAAsC;AAEpC,MAAIC,KAAK,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAZ;;AACAN,EAAAA,GAAG,GAAG,SAASO,SAAT,GAAqB;AACzBN,IAAAA,MAAM,CAACG,eAAP,CAAuBC,KAAvB;AACA,WAAOA,KAAP;AACD,GAHD;AAID;;AAED,IAAI,CAACL,GAAL,EAAU;AAKR,MAAKQ,IAAI,GAAG,IAAIC,KAAJ,CAAU,EAAV,CAAZ;;AACAT,EAAAA,GAAG,GAAG,eAAW;AACf,SAAK,IAAIU,CAAC,GAAG,CAAR,EAAWC,CAAhB,EAAmBD,CAAC,GAAG,EAAvB,EAA2BA,CAAC,EAA5B,EAAgC;AAC9B,UAAI,CAACA,CAAC,GAAG,IAAL,MAAe,CAAnB,EAAsBC,CAAC,GAAGC,IAAI,CAACC,MAAL,KAAgB,WAApB;AACtBL,MAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUC,CAAC,MAAM,CAACD,CAAC,GAAG,IAAL,KAAc,CAApB,CAAD,GAA0B,IAApC;AACD;;AAED,WAAOF,IAAP;AACD,GAPD;AAQD;;AAEDM,MAAM,CAACC,OAAP,GAAiBf,GAAjB","sourcesContent":["// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = global.crypto || global.msCrypto; // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16);\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var  rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n"]},"metadata":{},"sourceType":"script"}