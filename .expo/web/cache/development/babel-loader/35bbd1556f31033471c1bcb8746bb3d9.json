{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Pig_p\\\\Desktop\\\\School\\\\ReactNativeProjects\\\\MapProject\\\\node_modules\\\\react-native-geojson\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, PropTypes } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport MapView from 'react-native-maps';\nimport uuid from 'uuid';\nexport var makeOverlays = function makeOverlays(features) {\n  var points = features.filter(function (f) {\n    return f.geometry && (f.geometry.type === 'Point' || f.geometry.type === 'MultiPoint');\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'point'\n    });\n  });\n  var lines = features.filter(function (f) {\n    return f.geometry && (f.geometry.type === 'LineString' || f.geometry.type === 'MultiLineString');\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'polyline'\n    });\n  });\n  var multipolygons = features.filter(function (f) {\n    return f.geometry && f.geometry.type === 'MultiPolygon';\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []);\n  var polygons = features.filter(function (f) {\n    return f.geometry && f.geometry.type === 'Polygon';\n  }).map(function (feature) {\n    return makeOverlay(makeCoordinates(feature), feature);\n  }).reduce(flatten, []).concat(multipolygons).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'polygon'\n    });\n  });\n  var overlays = points.concat(lines).concat(polygons);\n  return overlays;\n};\n\nvar flatten = function flatten(prev, curr) {\n  return prev.concat(curr);\n};\n\nvar makeOverlay = function makeOverlay(coordinates, feature) {\n  var overlay = {\n    feature: feature,\n    id: feature.id ? feature.id : uuid()\n  };\n\n  if (feature.geometry.type === 'Polygon' || feature.geometry.type === 'MultiPolygon') {\n    overlay.coordinates = coordinates[0];\n\n    if (coordinates.length > 1) {\n      overlay.holes = coordinates.slice(1);\n    }\n  } else {\n    overlay.coordinates = coordinates;\n  }\n\n  return overlay;\n};\n\nvar makePoint = function makePoint(c) {\n  return {\n    latitude: c[1],\n    longitude: c[0]\n  };\n};\n\nvar makeLine = function makeLine(l) {\n  return l.map(makePoint);\n};\n\nvar makeCoordinates = function makeCoordinates(feature) {\n  var g = feature.geometry;\n\n  if (g.type === 'Point') {\n    return [makePoint(g.coordinates)];\n  } else if (g.type === 'MultiPoint') {\n    return g.coordinates.map(makePoint);\n  } else if (g.type === 'LineString') {\n    return [makeLine(g.coordinates)];\n  } else if (g.type === 'MultiLineString') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'Polygon') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'MultiPolygon') {\n    return g.coordinates.map(function (p) {\n      return p.map(makeLine);\n    });\n  } else {\n    return [];\n  }\n};\n\nvar Geojson = function Geojson(props) {\n  var overlays = makeOverlays(props.geojson.features);\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, overlays.map(function (overlay) {\n    if (overlay.type === 'point') {\n      return React.createElement(MapView.Marker, {\n        key: overlay.id,\n        coordinate: overlay.coordinates,\n        pinColor: props.color,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      });\n    }\n\n    if (overlay.type === 'polygon') {\n      return React.createElement(MapView.Polygon, {\n        key: overlay.id,\n        coordinates: overlay.coordinates,\n        holes: overlay.holes,\n        strokeColor: props.strokeColor,\n        fillColor: props.fillColor,\n        strokeWidth: props.strokeWidth,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      });\n    }\n\n    if (overlay.type === 'polyline') {\n      return React.createElement(MapView.Polyline, {\n        key: overlay.id,\n        coordinates: overlay.coordinates,\n        strokeColor: props.strokeColor,\n        strokeWidth: props.strokeWidth,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      });\n    }\n  }));\n};\n\nexport default Geojson;","map":{"version":3,"sources":["C:/Users/Pig_p/Desktop/School/ReactNativeProjects/MapProject/node_modules/react-native-geojson/index.js"],"names":["React","Component","PropTypes","MapView","uuid","makeOverlays","features","points","filter","f","geometry","type","map","feature","makeCoordinates","coordinates","makeOverlay","reduce","flatten","overlay","lines","multipolygons","polygons","concat","overlays","prev","curr","id","length","holes","slice","makePoint","c","latitude","longitude","makeLine","l","g","p","Geojson","props","geojson","color","strokeColor","fillColor","strokeWidth"],"mappings":"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","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { View } from 'react-native';\nimport MapView from 'react-native-maps';\nimport uuid from 'uuid';\n\nexport const makeOverlays = features => {\n  const points = features\n    .filter(f => f.geometry && (f.geometry.type === 'Point' || f.geometry.type === 'MultiPoint'))\n    .map(feature => makeCoordinates(feature).map(coordinates => makeOverlay(coordinates, feature)))\n    .reduce(flatten, [])\n    .map(overlay => ({ ...overlay, type: 'point' }));\n\n  const lines = features\n    .filter(\n      f => f.geometry && (f.geometry.type === 'LineString' || f.geometry.type === 'MultiLineString')\n    )\n    .map(feature => makeCoordinates(feature).map(coordinates => makeOverlay(coordinates, feature)))\n    .reduce(flatten, [])\n    .map(overlay => ({ ...overlay, type: 'polyline' }));\n\n  const multipolygons = features\n    .filter(f => f.geometry && f.geometry.type === 'MultiPolygon')\n    .map(feature => makeCoordinates(feature).map(coordinates => makeOverlay(coordinates, feature)))\n    .reduce(flatten, []);\n\n  const polygons = features\n    .filter(f => f.geometry && f.geometry.type === 'Polygon')\n    .map(feature => makeOverlay(makeCoordinates(feature), feature))\n    .reduce(flatten, [])\n    .concat(multipolygons)\n    .map(overlay => ({ ...overlay, type: 'polygon' }));\n\n  const overlays = points.concat(lines).concat(polygons);\n\n  return overlays;\n};\n\nconst flatten = (prev, curr) => prev.concat(curr);\n\nconst makeOverlay = (coordinates, feature) => {\n  let overlay = {\n    feature,\n    id: feature.id ? feature.id : uuid(),\n  };\n  if (feature.geometry.type === 'Polygon' || feature.geometry.type === 'MultiPolygon') {\n    overlay.coordinates = coordinates[0];\n    if (coordinates.length > 1) {\n      overlay.holes = coordinates.slice(1);\n    }\n  } else {\n    overlay.coordinates = coordinates;\n  }\n  return overlay;\n};\n\nconst makePoint = c => ({ latitude: c[1], longitude: c[0] });\n\nconst makeLine = l => l.map(makePoint);\n\nconst makeCoordinates = feature => {\n  const g = feature.geometry;\n  if (g.type === 'Point') {\n    return [makePoint(g.coordinates)];\n  } else if (g.type === 'MultiPoint') {\n    return g.coordinates.map(makePoint);\n  } else if (g.type === 'LineString') {\n    return [makeLine(g.coordinates)];\n  } else if (g.type === 'MultiLineString') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'Polygon') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'MultiPolygon') {\n    return g.coordinates.map(p => p.map(makeLine));\n  } else {\n    return [];\n  }\n};\n\nconst Geojson = props => {\n  const overlays = makeOverlays(props.geojson.features);\n  return (\n    <View>\n      {overlays.map(overlay => {\n        if (overlay.type === 'point') {\n          return (\n            <MapView.Marker\n              key={overlay.id}\n              coordinate={overlay.coordinates}\n              pinColor={props.color}\n            />\n          );\n        }\n        if (overlay.type === 'polygon') {\n          return (\n            <MapView.Polygon\n              key={overlay.id}\n              coordinates={overlay.coordinates}\n              holes={overlay.holes}\n              strokeColor={props.strokeColor}\n              fillColor={props.fillColor}\n              strokeWidth={props.strokeWidth}\n            />\n          );\n        }\n        if (overlay.type === 'polyline') {\n          return (\n            <MapView.Polyline\n              key={overlay.id}\n              coordinates={overlay.coordinates}\n              strokeColor={props.strokeColor}\n              strokeWidth={props.strokeWidth}\n            />\n          );\n        }\n      })}\n    </View>\n  );\n};\n\nexport default Geojson;\n"]},"metadata":{},"sourceType":"module"}